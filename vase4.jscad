// UNFOLDING LIBRARY
aplat = function() {
	vec2 			= function (v) {
    if (v.length != 2 || v.x !== undefined || isNaN(v[0]+v[1])) die('v should be a float[2]: ', v);
    return new CSG.Vector2D(v);
};
	centre			= function (d) {
var r, i;

if(d[0].z){
    r = new CSG.Vector3D([0, 0, 0]);
}else{
    r = new CSG.Vector2D([0, 0]);
}

    for(i=0; i<d.length; i++){
        r = r.plus(d[i]);
    }
    r = r.dividedBy(d.length);
    
    return r;
};
	fait_nombres	= function (){
var np = [
[[0,0],[0,16],[8,16],[8,0],[0,0]],
[[0,8],[8,16],[8,0]],
[[0,12],[0,16],[8,16],[8,8],[0,8],[0,0],[8,0]],
[[0,13],[0,16],[8,16],[8,11],[4,8],[8,5],[8,0],[0,0],[0,3]],
[[8,8],[0,8],[6,16],[6,0]],
[[8,16],[0,16],[0,8],[8,8],[8,0],[0,0]],
[[8,16],[0,8],[0,0],[8,0],[8,8],[0,8]],
[[0,16],[8,16],[0,0]],
[[4,9],[1,12],[1,16],[7,16],[7,12],[4,9],[8,7],[8,0],[0,0],[0,7],[4,9]],
[[8,8],[0,8],[0,16],[8,16],[8,0],[0,0]]
];
for(var i in np)
    _num[i] = new CSG.Path2D(np[i]).expandToCAG(_ghEncoche).scale(_gTextScale);
};
	nombreCentre	= function (center, n, estPetit){
var label = nombre(n);

if(estPetit)label = label.scale(0.75);
var B = label.getBounds();
//var dx = B[1].x - B[0].x, dy = B[1].y - B[0].y;
R = center.minus((B[1].minus(B[0])).times(1/2));
//return label.translate([center.x - dx/2, center.y-dy/2 , 0]);
return label.translate(R);

};
	nombre			= function (n){
if (_num.length === 0)fait_nombres();
var ch = n.toString();
var r = null;
for(var i=0; i<ch.length; i++){
    var c = ch.charCodeAt(i) - 48;
    var t = _num[c].translate([i*11*_gTextScale, 0]);
	r = (r === null ? t : r.union(t));
}
return r;
};
	encoche			= function (p,n) {
s = p[n];
e = p[(n+1)%3];
o = p[(n+2)%3];

d = e.minus(s);
p = d.normal().unit().times(_ghEncoche);
antip = p.times(-1);
if(s.plus(p).minus(o).lengthSquared() <
    s.plus(antip).minus(o).lengthSquared()){
        p = antip;
}

bs = s;
be = e;
te = s.plus(d.times(0.65)).plus(p);
ts = s.plus(d.times(0.35)).plus(p);

return [bs, ts, te, be];
};
	creeTriangle	= function (T, C) {
var poly, p, v, P2D;

poly = V.polygons[T];
p = CSG.fromPolygons([poly]).lieFlat();
if(C)p = p.translate(C);

v = p.polygons[0].vertices;
P2D =   [vec2([v[0].pos.x, v[0].pos.y])
        ,vec2([v[1].pos.x, v[1].pos.y])
        ,vec2([v[2].pos.x, v[2].pos.y])
    ];
data[T] = {};
data[T].triangle = P2D;
};
	reseaute		= function (T) {
    var nbV, n, i, pt, j, d, sI, nv;

    data[T].voisins = [];
    nbV=0;
    for(n=0; n<V.polygons.length; n++){
        if(n != T){
            if(!(n in data)){
                creeTriangle(n);
            }
            // recherche correspondance
            corr = []; sI =0;
            for (i=0;i<3;i++){
                pt = V.polygons[T].vertices[i].pos;
                for(j=0;j<3;j++){
                    d = pt.equals(V.polygons[n].vertices[j].pos);
                    if(d){
                        corr.push({p1:i, p2:j});
                        sI += i;
                    }
                }
            }
            if(corr.length ==2){
                nv= sI-1;
                if(nv)nv= 3-nv;
                data[T].voisins[nv] =
                {id: n, corr: corr};
                nbV++;
            }
        }
        if(nbV == 3){
            break;
        }
    }
};
	afficheTriangle	= function (T) {
var triangle, texte, tmp, D;

triangle = new CSG.Path2D(data[T].triangle, true).expandToCAG(_gLigneE);
texte = nombreCentre(centre(data[T].triangle), T);

a_t = _ti.indexOf(T); a_ti = _ti.indexOf(T*-1);
if((a_t>-1)||(a_ti>-1)){
	// calcul des distances
	D = [];
	D[0] = Math.hypot(data[T].triangle[1].x - data[T].triangle[0].x, data[T].triangle[1].y - data[T].triangle[0].y);
	D[1] = Math.hypot(data[T].triangle[2].x - data[T].triangle[1].x, data[T].triangle[2].y - data[T].triangle[1].y);
	D[2] = Math.hypot(data[T].triangle[0].x - data[T].triangle[2].x, data[T].triangle[0].y - data[T].triangle[2].y);
	pgPt = D.indexOf(Math.max(...D)); // retour de l'id contenant la distance max
	pgPtN = (pgPt <2) ? pgPt+1 : 0;
	angleD = 360-(Math.atan2(data[T].triangle[pgPtN].y - data[T].triangle[pgPt].y, data[T].triangle[pgPtN].x - data[T].triangle[pgPt].x) * 180 / Math.PI);
	if(a_ti>-1){angleD = 180+angleD;}
	tmp = mkPoly(data[T].triangle, T, false, angleD);
}
else{
	tmp = tmp = mkPoly(data[T].triangle, T);
}

_r.svg.push(tmp.join('\n'));
_r.cag.push(triangle, texte);
};
aplat.fixeTriangle	= function (T1,T2) {
    var c, dk, ra, tmp, delta, i;
    
    if(T2.constructor === Array){
        for(i in T2){aplat.fixeTriangle(T1,T2[i]);}
    }else{
        //recherche correspondance
        n = false;
        for(i in data[T1].voisins){
            if(data[T1].voisins[i].id == T2){
                n = i;
                break;
            }
        }
        corr = data[T1].voisins[n].corr;
        // translation premier point
        dk = data[T1].triangle[corr[0].p1].minus(data[T2].triangle[corr[0].p2]);
        data[T2].triangle = add2D(data[T2].triangle, dk);

        // rotation si besoin
        ra = 0 - gPrec;
        do{
            ra += gPrec;
            tmp = data[T2].triangle[corr[1].p2]
                .rotate(data[T2].triangle[corr[0].p2], [0,0,1],ra);
            delta = tmp.distanceTo(data[T1].triangle[corr[1].p1]);
        }while((delta > gPrec) && (ra < 360));

        if(delta<= gPrec){
            data[T2].triangle = rotZ2D(data[T2].triangle, data[T2].triangle[corr[0].p2], ra);
        }
        reseaute(T2);
        afficheTriangle(T2);
    }
};
aplat.fixeTriangles	= function (T){
    var i;
    for(i=0;i<T.length-1;i++){
        aplat.fixeTriangle(T[i], T[i+1]);
    }
    if(g_RX)
        afficheEncoches(T[T.length-1]);
};
aplat.poseTriangle	= function (T, C, a) {
    creeTriangle(T, C);
    if(a)
        data[T].triangle = rotZ2D(data[T].triangle, centre(data[T].triangle), a);
    
    reseaute(T);
    afficheTriangle(T);
};
aplat.afficheEncoches=function (T) {
    var i, tmp;
    
    if(T.constructor === Array){
        for(i in T) {afficheEncoches(T[i]);}
    }else{

        for(i = 0; i < 3; i++){
            tmp = afficheEncoche(T, i);
        }
    }
};
	afficheEncocheN	= function (T, E) {
    var n, i;

    if(E.constructor === Array){
        for(i in E){
            afficheEncocheN(T,E[i]);
        }
    }else{
        n = -1;
        for(i in data[T].voisins){
            if(data[T].voisins[i].id == E){
            n = i;
            break;
        }
        }

        if(n >-1){
            afficheEncoche(T, n);
        }
    }
};
	afficheEncoche	= function (nT, nE) {
var tmp, R1, R2, rTmp, angleD;

tmp = encoche(data[nT].triangle, nE);
R1 = new CSG.Path2D(tmp, true).expandToCAG(_gLigneE);
ch = data[nT].voisins[nE].id;
if(ch== null)ch="!";
R2 = nombreCentre(centre(tmp), ch, true);
angleD = 360-(Math.atan2(tmp[2].y - tmp[1].y, tmp[2].x - tmp[1].x) * 180 / Math.PI);
rTmp = mkPoly(tmp, ch, true, angleD);
_r.svg.push(rTmp.join('\n'));
_r.cag.push(R1,R2);
};
	add2D			= function (d, v) {
    return d.map((Vector2D) => Vector2D.plus(v));
};
	rotZ2D			= function (d, O, ra) {
    return d.map((Vector2D) => Vector2D.rotate(O, [0,0,1], ra));
};
aplat.lotEncoches	= function (L) {
L.forEach(function(a){
			afficheEncocheN(a[0],a[1]);
		});
};
	mkPoly			= function (pts,nT, estPolyLine, angleD =0){
var R = [], i, ch, chP, chID;
    

tmp = centre(pts);
c =  {x:tmp.x, y:200 - tmp.y};

for(i=0; i< pts.length; i++){
	nx = i;
	ny = i+1;
	if (ny == pts.length)ny = 0;
	if((pts[nx].x < pts[ny].x) || ((pts[nx].x == pts[ny].x) && (pts[nx].y < pts[ny].y) )){
		nx = ny;
		ny = i;
	}
	ch = '<line x1="%1" y1="%2" x2="%3" y2="%4" />';
	ch = ch.replace("%1", (pts[nx].x*_gSVGScale).toFixed(2));
	ch = ch.replace("%2", ((200-pts[nx].y)*_gSVGScale).toFixed(2));
	ch = ch.replace("%3", (pts[ny].x*_gSVGScale).toFixed(2));
	ch = ch.replace("%4", ((200-pts[ny].y)*_gSVGScale).toFixed(2));
	R.push(ch);
}

if(estPolyLine){
    chID = "";
}else{
    chID = "id='"+ nT 
    + '_' + data[nT].voisins[0].id
    + '_' + data[nT].voisins[1].id
    + '_' + data[nT].voisins[2].id
    + "' ";
}
/*
 // angle in radians
var angleRadians = Math.atan2(p2.y - p1.y, p2.x - p1.x);

// angle in degrees
var angleDeg = Math.atan2(p2.y - p1.y, p2.x - p1.x) * 180 / Math.PI;
* transform="rotate(45, cx, cy)"
 */
cx = (c.x*_gSVGScale).toFixed(2);
cy = (c.y*_gSVGScale).toFixed(2);
if(angleD){
	chRot = 'transform="rotate(' + angleD + ', ' + cx + ', ' + cy + ')" ';
}else{
	chRot = "";
}

R.push("<text class='"+ (estPolyLine ? "E" : "T") +"' "
    + "x='" + cx + "' "
    + "y='" + cy + "' "
    + chID + chRot + ">"
    + nT + "</text>");

return R;
};
	initSvg			= function (a){
	a.svg = [
'<svg width="210mm" height="297mm" viewBox="0 0 744.09448 1052.3622" >',
'<style type="text/css" >',
'<![CDATA[',
'svg {}',
'path {fill:#eeeeee; stroke:#000000; stroke-width:0.1px;stroke-linejoin:round;position:relative;z-index:0;}',
'text {text-anchor:middle; dominant-baseline:central;z-index:1;}',
'text.T {font-size: '+ (10 * _gSVGScale) +'%;}',
'text.E {font-size: '+ (6  * _gSVGScale) +'%;fill:#0000ff;}',
'line {stroke-width:1px;stroke:#000000;}',
'line.P {stroke:#ff0000; stroke-dasharray:6 6;}',
']]>',
'</style>'
];

};
aplat.rendu			= function (R, a){
var i, R2;

initSvg(R);
for(i in a){
	R.svg.push("<g>");
	switch(a[i]){
		case "p1":volume.p1(); break;
		case "p1a":volume.p1a(); break;
		case "p1b":volume.p1b(); break;
		case "p1c":volume.p1c(); break;
		case "p1d":volume.p1d(); break;
		case "p2":volume.p2(); break;
		case "p3":volume.p3(); break;
		case "p4":volume.p4(); break;
		case "p5":volume.p5(); break;
		case "p5a":volume.p5a(); break;
		case "p5b":volume.p5b(); break;
		case "p5c":volume.p5c(); break;
		case "p6":volume.p6(); break;
		case "p6a":volume.p6a(); break;
		case "p6b":volume.p6b(); break;
		case "p7":volume.p7(); break;
		case "p8":volume.p8(); break;
		case "p9":volume.p9(); break;
		case "p10":volume.p10(); break;
		case "p11":volume.p11(); break;
		case "p12":volume.p12(); break;
		case "p13":volume.p13(); break;
		case "p14":volume.p14(); break;
		case "p15":volume.p15(); break;
		case "p16":volume.p16(); break;
		case "p17":volume.p17(); break;
		case "p18":volume.p18(); break;
		case "p19":volume.p19(); break;
	}
	R.svg.push("</g>");
}
// sortie SVG
R.svg.push("</svg>");
// suppression doublons line
R0 = []; //R avec doublons
R2 = []; //R sans doublons
R2V = []; // valeurs de R2
R2VC = 0;
N = []; //index des lignes doublées (= pli)
for(i in R.svg){
	ch = R.svg[i];
	chR = ch.split('\n');
	for(j in chR){
		R0.push(chR[j]);
	}
};
function xtV(ch){
	var tmp = ch.split("=");
	return parseFloat(tmp[1]);
};

for(i in R0){
	ch = R0[i];
	ok = true;
	if(ch.startsWith("<line ")){
		ch2 = ch.replace(/"/g,"");
		V = ch2.split(" ");
		V1 = {x1:xtV(V[1]), y1:xtV(V[2]), x2:xtV(V[3]), y2:xtV(V[4])};
		
		for(j=0; j < R2V.length; j++){
			V2 = R2V[j];
			if(V2){
			if(	(Math.abs(V1.x1 - V2.x1) < 0.2)
			  &&(Math.abs(V1.y1 - V2.y1) < 0.2)
			  &&(Math.abs(V1.x2 - V2.x2) < 0.2)
			  &&(Math.abs(V1.y2 - V2.y2) < 0.2)){
				ok = false;
				break;
			}}
		}
		
		if(!ok){
			N.push(j);
		}
	}else{
		V1 = null;
	}
	if(ok){
		R2.push(ch);
		R2V.push(V1);
		if(V1 != null)R2VC++;
	}
}
for(i in N){
	R2[N[i]] = R2[N[i]].replace("line", "line class='P'");
}
console.log(R2.join('\n'));
}
}

// DATA : Volume + Unfold Instructions
volume = function () {
function main() { return polyhedron({ points: [
	[-6.938894007304805e-19,0.4166666567325592,1.503333330154419],
	[-0.4166666567325592,0.4166666567325592,1.503333330154419],
	[-0.4166666567325592,0,1.503333330154419],
	[-0.4166666567325592,0,1.503333330154419],
	[-0.4166666567325592,-0.4166666567325592,1.503333330154419],
	[-6.938894007304805e-19,-0.4166666567325592,1.503333330154419],
	[-0.4166666567325592,0,1.503333330154419],
	[-6.938894007304805e-19,-0.4166666567325592,1.503333330154419],
	[0.4166666567325592,0,1.503333330154419],
	[-6.938894007304805e-19,-0.4166666567325592,1.503333330154419],
	[0.4166666567325592,-0.4166666567325592,1.503333330154419],
	[0.4166666567325592,0,1.503333330154419],
	[0.4166666567325592,0,1.503333330154419],
	[0.4166666567325592,0.4166666567325592,1.503333330154419],
	[-6.938894007304805e-19,0.4166666567325592,1.503333330154419],
	[0.4166666567325592,0,1.503333330154419],
	[-6.938894007304805e-19,0.4166666567325592,1.503333330154419],
	[-0.4166666567325592,0,1.503333330154419],
	[0.4166666567325592,0,1.503333330154419],
	[0.4166666567325592,0,1.3333333730697632],
	[0.3125,0.3125,1.3333333730697632],
	[0.3125,0.3125,1.3333333730697632],
	[0.4166666567325592,0.4166666567325592,1.503333330154419],
	[0.4166666567325592,0,1.503333330154419],
	[-6.938894007304805e-19,0.4166666567325592,1.503333330154419],
	[-6.938894007304805e-19,0.4166666567325592,1.3333333730697632],
	[-0.3125,0.3125,1.3333333730697632],
	[-0.3125,0.3125,1.3333333730697632],
	[-0.4166666567325592,0.4166666567325592,1.503333330154419],
	[-6.938894007304805e-19,0.4166666567325592,1.503333330154419],
	[-0.3125,-0.3125,1.3333333730697632],
	[-0.4166666567325592,-0.4166666567325592,1.503333330154419],
	[-0.4166666567325592,0,1.503333330154419],
	[-0.4166666567325592,0,1.503333330154419],
	[-0.4166666567325592,0,1.3333333730697632],
	[-0.3125,-0.3125,1.3333333730697632],
	[0.3125,-0.3125,1.3333333730697632],
	[0.4166666567325592,-0.4166666567325592,1.503333330154419],
	[-6.938894007304805e-19,-0.4166666567325592,1.503333330154419],
	[-6.938894007304805e-19,-0.4166666567325592,1.503333330154419],
	[-6.938894007304805e-19,-0.4166666567325592,1.3333333730697632],
	[0.3125,-0.3125,1.3333333730697632],
	[0.7986111044883728,0.3819444477558136,0.7916666865348816],
	[0.8333333134651184,0,0.8333333134651184],
	[1.0416666269302368,0,0.3333333432674408],
	[1.0416666269302368,0,0.3333333432674408],
	[0.9722222089767456,0.3993055522441864,0.3333333432674408],
	[0.7986111044883728,0.3819444477558136,0.7916666865348816],
	[1.0416666269302368,0,0.3333333432674408],
	[0.8333333134651184,0,0.8333333134651184],
	[0.7986111044883728,-0.3819444477558136,0.7916666865348816],
	[1.0416666269302368,0,0.3333333432674408],
	[0.7986111044883728,-0.3819444477558136,0.7916666865348816],
	[0.9722222089767456,-0.3993055522441864,0.3333333432674408],
	[0.4166666567325592,0,1.3333333730697632],
	[0.3125,-0.3125,1.3333333730697632],
	[0.7986111044883728,-0.3819444477558136,0.7916666865348816],
	[0.4166666567325592,0,1.3333333730697632],
	[0.7986111044883728,-0.3819444477558136,0.7916666865348816],
	[0.8333333134651184,0,0.8333333134651184],
	[0.7986111044883728,0.3819444477558136,0.7916666865348816],
	[0.3125,0.3125,1.3333333730697632],
	[0.4166666567325592,0,1.3333333730697632],
	[0.7986111044883728,0.3819444477558136,0.7916666865348816],
	[0.4166666567325592,0,1.3333333730697632],
	[0.8333333134651184,0,0.8333333134651184],
	[0.6944444179534912,-0.6944444179534912,0.6666666865348816],
	[0.7638888955116272,-0.7638888955116272,0.3333333432674408],
	[0.9722222089767456,-0.3993055522441864,0.3333333432674408],
	[0.9722222089767456,-0.3993055522441864,0.3333333432674408],
	[0.7986111044883728,-0.3819444477558136,0.7916666865348816],
	[0.6944444179534912,-0.6944444179534912,0.6666666865348816],
	[0.7638888955116272,-0.7638888955116272,0.3333333432674408],
	[0.6944444179534912,-0.6944444179534912,0.6666666865348816],
	[0.3993055522441864,-0.9722222089767456,0.3333333432674408],
	[0.6944444179534912,-0.6944444179534912,0.6666666865348816],
	[0.3819444477558136,-0.7986111044883728,0.7916666865348816],
	[0.3993055522441864,-0.9722222089767456,0.3333333432674408],
	[0.3819444477558136,-0.7986111044883728,0.7916666865348816],
	[0.6944444179534912,-0.6944444179534912,0.6666666865348816],
	[0.7986111044883728,-0.3819444477558136,0.7916666865348816],
	[0.7986111044883728,-0.3819444477558136,0.7916666865348816],
	[0.3125,-0.3125,1.3333333730697632],
	[0.3819444477558136,-0.7986111044883728,0.7916666865348816],
	[0.3993055522441864,0.9722222089767456,0.3333333432674408],
	[0.3819444477558136,0.7986111044883728,0.7916666865348816],
	[0.6944444179534912,0.6944444179534912,0.6666666865348816],
	[0.3993055522441864,0.9722222089767456,0.3333333432674408],
	[0.6944444179534912,0.6944444179534912,0.6666666865348816],
	[0.7638888955116272,0.7638888955116272,0.3333333432674408],
	[0.9722222089767456,0.3993055522441864,0.3333333432674408],
	[0.7638888955116272,0.7638888955116272,0.3333333432674408],
	[0.6944444179534912,0.6944444179534912,0.6666666865348816],
	[0.6944444179534912,0.6944444179534912,0.6666666865348816],
	[0.7986111044883728,0.3819444477558136,0.7916666865348816],
	[0.9722222089767456,0.3993055522441864,0.3333333432674408],
	[0.3819444477558136,0.7986111044883728,0.7916666865348816],
	[0.3125,0.3125,1.3333333730697632],
	[0.7986111044883728,0.3819444477558136,0.7916666865348816],
	[0.3819444477558136,0.7986111044883728,0.7916666865348816],
	[0.7986111044883728,0.3819444477558136,0.7916666865348816],
	[0.6944444179534912,0.6944444179534912,0.6666666865348816],
	[-1.0416666269302368,0,0.3333333432674408],
	[-0.9722222089767456,-0.3993055522441864,0.3333333432674408],
	[-0.7986111044883728,-0.3819444477558136,0.7916666865348816],
	[-1.0416666269302368,0,0.3333333432674408],
	[-0.7986111044883728,-0.3819444477558136,0.7916666865348816],
	[-0.8333333134651184,0,0.8333333134651184],
	[-1.0416666269302368,0,0.3333333432674408],
	[-0.8333333134651184,0,0.8333333134651184],
	[-0.7986111044883728,0.3819444477558136,0.7916666865348816],
	[-0.7986111044883728,0.3819444477558136,0.7916666865348816],
	[-0.9722222089767456,0.3993055522441864,0.3333333432674408],
	[-1.0416666269302368,0,0.3333333432674408],
	[-0.7986111044883728,0.3819444477558136,0.7916666865348816],
	[-0.8333333134651184,0,0.8333333134651184],
	[-0.4166666567325592,0,1.3333333730697632],
	[-0.7986111044883728,0.3819444477558136,0.7916666865348816],
	[-0.4166666567325592,0,1.3333333730697632],
	[-0.3125,0.3125,1.3333333730697632],
	[-0.4166666567325592,0,1.3333333730697632],
	[-0.8333333134651184,0,0.8333333134651184],
	[-0.7986111044883728,-0.3819444477558136,0.7916666865348816],
	[-0.4166666567325592,0,1.3333333730697632],
	[-0.7986111044883728,-0.3819444477558136,0.7916666865348816],
	[-0.3125,-0.3125,1.3333333730697632],
	[-6.938894007304805e-19,-1.0416666269302368,0.3333333432674408],
	[0.3993055522441864,-0.9722222089767456,0.3333333432674408],
	[0.3819444477558136,-0.7986111044883728,0.7916666865348816],
	[-6.938894007304805e-19,-1.0416666269302368,0.3333333432674408],
	[0.3819444477558136,-0.7986111044883728,0.7916666865348816],
	[-6.938894007304805e-19,-0.8333333134651184,0.8333333134651184],
	[-6.938894007304805e-19,-1.0416666269302368,0.3333333432674408],
	[-6.938894007304805e-19,-0.8333333134651184,0.8333333134651184],
	[-0.3819444477558136,-0.7986111044883728,0.7916666865348816],
	[-0.3819444477558136,-0.7986111044883728,0.7916666865348816],
	[-0.3993055522441864,-0.9722222089767456,0.3333333432674408],
	[-6.938894007304805e-19,-1.0416666269302368,0.3333333432674408],
	[-0.3819444477558136,-0.7986111044883728,0.7916666865348816],
	[-6.938894007304805e-19,-0.8333333134651184,0.8333333134651184],
	[-6.938894007304805e-19,-0.4166666567325592,1.3333333730697632],
	[-0.3819444477558136,-0.7986111044883728,0.7916666865348816],
	[-6.938894007304805e-19,-0.4166666567325592,1.3333333730697632],
	[-0.3125,-0.3125,1.3333333730697632],
	[0.3819444477558136,-0.7986111044883728,0.7916666865348816],
	[0.3125,-0.3125,1.3333333730697632],
	[-6.938894007304805e-19,-0.4166666567325592,1.3333333730697632],
	[0.3819444477558136,-0.7986111044883728,0.7916666865348816],
	[-6.938894007304805e-19,-0.4166666567325592,1.3333333730697632],
	[-6.938894007304805e-19,-0.8333333134651184,0.8333333134651184],
	[-0.3993055522441864,-0.9722222089767456,0.3333333432674408],
	[-0.3819444477558136,-0.7986111044883728,0.7916666865348816],
	[-0.6944444179534912,-0.6944444179534912,0.6666666865348816],
	[-0.3993055522441864,-0.9722222089767456,0.3333333432674408],
	[-0.6944444179534912,-0.6944444179534912,0.6666666865348816],
	[-0.7638888955116272,-0.7638888955116272,0.3333333432674408],
	[-0.9722222089767456,-0.3993055522441864,0.3333333432674408],
	[-0.7638888955116272,-0.7638888955116272,0.3333333432674408],
	[-0.6944444179534912,-0.6944444179534912,0.6666666865348816],
	[-0.6944444179534912,-0.6944444179534912,0.6666666865348816],
	[-0.7986111044883728,-0.3819444477558136,0.7916666865348816],
	[-0.9722222089767456,-0.3993055522441864,0.3333333432674408],
	[-0.7986111044883728,-0.3819444477558136,0.7916666865348816],
	[-0.6944444179534912,-0.6944444179534912,0.6666666865348816],
	[-0.3819444477558136,-0.7986111044883728,0.7916666865348816],
	[-0.3819444477558136,-0.7986111044883728,0.7916666865348816],
	[-0.3125,-0.3125,1.3333333730697632],
	[-0.7986111044883728,-0.3819444477558136,0.7916666865348816],
	[-0.6944444179534912,0.6944444179534912,0.6666666865348816],
	[-0.7638888955116272,0.7638888955116272,0.3333333432674408],
	[-0.9722222089767456,0.3993055522441864,0.3333333432674408],
	[-0.9722222089767456,0.3993055522441864,0.3333333432674408],
	[-0.7986111044883728,0.3819444477558136,0.7916666865348816],
	[-0.6944444179534912,0.6944444179534912,0.6666666865348816],
	[-0.7638888955116272,0.7638888955116272,0.3333333432674408],
	[-0.6944444179534912,0.6944444179534912,0.6666666865348816],
	[-0.3993055522441864,0.9722222089767456,0.3333333432674408],
	[-0.6944444179534912,0.6944444179534912,0.6666666865348816],
	[-0.3819444477558136,0.7986111044883728,0.7916666865348816],
	[-0.3993055522441864,0.9722222089767456,0.3333333432674408],
	[-0.3819444477558136,0.7986111044883728,0.7916666865348816],
	[-0.6944444179534912,0.6944444179534912,0.6666666865348816],
	[-0.7986111044883728,0.3819444477558136,0.7916666865348816],
	[-0.3819444477558136,0.7986111044883728,0.7916666865348816],
	[-0.7986111044883728,0.3819444477558136,0.7916666865348816],
	[-0.3125,0.3125,1.3333333730697632],
	[-0.3819444477558136,0.7986111044883728,0.7916666865348816],
	[-6.938894007304805e-19,0.8333333134651184,0.8333333134651184],
	[-6.938894007304805e-19,1.0416666269302368,0.3333333432674408],
	[-6.938894007304805e-19,1.0416666269302368,0.3333333432674408],
	[-0.3993055522441864,0.9722222089767456,0.3333333432674408],
	[-0.3819444477558136,0.7986111044883728,0.7916666865348816],
	[-6.938894007304805e-19,1.0416666269302368,0.3333333432674408],
	[-6.938894007304805e-19,0.8333333134651184,0.8333333134651184],
	[0.3819444477558136,0.7986111044883728,0.7916666865348816],
	[-6.938894007304805e-19,1.0416666269302368,0.3333333432674408],
	[0.3819444477558136,0.7986111044883728,0.7916666865348816],
	[0.3993055522441864,0.9722222089767456,0.3333333432674408],
	[0.3819444477558136,0.7986111044883728,0.7916666865348816],
	[-6.938894007304805e-19,0.8333333134651184,0.8333333134651184],
	[-6.938894007304805e-19,0.4166666567325592,1.3333333730697632],
	[0.3819444477558136,0.7986111044883728,0.7916666865348816],
	[-6.938894007304805e-19,0.4166666567325592,1.3333333730697632],
	[0.3125,0.3125,1.3333333730697632],
	[-0.3819444477558136,0.7986111044883728,0.7916666865348816],
	[-0.3125,0.3125,1.3333333730697632],
	[-6.938894007304805e-19,0.4166666567325592,1.3333333730697632],
	[-0.3819444477558136,0.7986111044883728,0.7916666865348816],
	[-6.938894007304805e-19,0.4166666567325592,1.3333333730697632],
	[-6.938894007304805e-19,0.8333333134651184,0.8333333134651184],
	[1.0416666269302368,0,0.3333333432674408],
	[0.9722222089767456,-0.3993055522441864,0.3333333432674408],
	[0.7986111044883728,-0.3819444477558136,-0.125],
	[1.0416666269302368,0,0.3333333432674408],
	[0.7986111044883728,-0.3819444477558136,-0.125],
	[0.8333333134651184,0,-0.1666666716337204],
	[1.0416666269302368,0,0.3333333432674408],
	[0.8333333134651184,0,-0.1666666716337204],
	[0.7986111044883728,0.3819444477558136,-0.125],
	[0.7986111044883728,0.3819444477558136,-0.125],
	[0.9722222089767456,0.3993055522441864,0.3333333432674408],
	[1.0416666269302368,0,0.3333333432674408],
	[0.7986111044883728,0.3819444477558136,-0.125],
	[0.8333333134651184,0,-0.1666666716337204],
	[0.5208333134651184,0,-0.6666666865348816],
	[0.5208333134651184,0,-0.6666666865348816],
	[0.390625,0.390625,-0.6666666865348816],
	[0.7986111044883728,0.3819444477558136,-0.125],
	[0.7986111044883728,-0.3819444477558136,-0.125],
	[0.390625,-0.390625,-0.6666666865348816],
	[0.5208333134651184,0,-0.6666666865348816],
	[0.7986111044883728,-0.3819444477558136,-0.125],
	[0.5208333134651184,0,-0.6666666865348816],
	[0.8333333134651184,0,-0.1666666716337204],
	[0.3993055522441864,-0.9722222089767456,0.3333333432674408],
	[0.3819444477558136,-0.7986111044883728,-0.125],
	[0.6944444179534912,-0.6944444179534912,0],
	[0.3993055522441864,-0.9722222089767456,0.3333333432674408],
	[0.6944444179534912,-0.6944444179534912,0],
	[0.7638888955116272,-0.7638888955116272,0.3333333432674408],
	[0.9722222089767456,-0.3993055522441864,0.3333333432674408],
	[0.7638888955116272,-0.7638888955116272,0.3333333432674408],
	[0.6944444179534912,-0.6944444179534912,0],
	[0.9722222089767456,-0.3993055522441864,0.3333333432674408],
	[0.6944444179534912,-0.6944444179534912,0],
	[0.7986111044883728,-0.3819444477558136,-0.125],
	[0.7986111044883728,-0.3819444477558136,-0.125],
	[0.6944444179534912,-0.6944444179534912,0],
	[0.3819444477558136,-0.7986111044883728,-0.125],
	[0.7986111044883728,-0.3819444477558136,-0.125],
	[0.3819444477558136,-0.7986111044883728,-0.125],
	[0.390625,-0.390625,-0.6666666865348816],
	[0.9722222089767456,0.3993055522441864,0.3333333432674408],
	[0.7986111044883728,0.3819444477558136,-0.125],
	[0.6944444179534912,0.6944444179534912,0],
	[0.9722222089767456,0.3993055522441864,0.3333333432674408],
	[0.6944444179534912,0.6944444179534912,0],
	[0.7638888955116272,0.7638888955116272,0.3333333432674408],
	[0.3993055522441864,0.9722222089767456,0.3333333432674408],
	[0.7638888955116272,0.7638888955116272,0.3333333432674408],
	[0.6944444179534912,0.6944444179534912,0],
	[0.3993055522441864,0.9722222089767456,0.3333333432674408],
	[0.6944444179534912,0.6944444179534912,0],
	[0.3819444477558136,0.7986111044883728,-0.125],
	[0.390625,0.390625,-0.6666666865348816],
	[0.3819444477558136,0.7986111044883728,-0.125],
	[0.7986111044883728,0.3819444477558136,-0.125],
	[0.3819444477558136,0.7986111044883728,-0.125],
	[0.6944444179534912,0.6944444179534912,0],
	[0.7986111044883728,0.3819444477558136,-0.125],
	[-0.7986111044883728,0.3819444477558136,-0.125],
	[-0.8333333134651184,0,-0.1666666716337204],
	[-1.0416666269302368,0,0.3333333432674408],
	[-1.0416666269302368,0,0.3333333432674408],
	[-0.9722222089767456,0.3993055522441864,0.3333333432674408],
	[-0.7986111044883728,0.3819444477558136,-0.125],
	[-1.0416666269302368,0,0.3333333432674408],
	[-0.8333333134651184,0,-0.1666666716337204],
	[-0.7986111044883728,-0.3819444477558136,-0.125],
	[-1.0416666269302368,0,0.3333333432674408],
	[-0.7986111044883728,-0.3819444477558136,-0.125],
	[-0.9722222089767456,-0.3993055522441864,0.3333333432674408],
	[-0.7986111044883728,-0.3819444477558136,-0.125],
	[-0.8333333134651184,0,-0.1666666716337204],
	[-0.5208333134651184,0,-0.6666666865348816],
	[-0.7986111044883728,-0.3819444477558136,-0.125],
	[-0.5208333134651184,0,-0.6666666865348816],
	[-0.390625,-0.390625,-0.6666666865348816],
	[-0.5208333134651184,0,-0.6666666865348816],
	[-0.8333333134651184,0,-0.1666666716337204],
	[-0.7986111044883728,0.3819444477558136,-0.125],
	[-0.7986111044883728,0.3819444477558136,-0.125],
	[-0.390625,0.390625,-0.6666666865348816],
	[-0.5208333134651184,0,-0.6666666865348816],
	[-0.3819444477558136,-0.7986111044883728,-0.125],
	[-6.938894007304805e-19,-0.8333333134651184,-0.1666666716337204],
	[-6.938894007304805e-19,-1.0416666269302368,0.3333333432674408],
	[-6.938894007304805e-19,-1.0416666269302368,0.3333333432674408],
	[-0.3993055522441864,-0.9722222089767456,0.3333333432674408],
	[-0.3819444477558136,-0.7986111044883728,-0.125],
	[-6.938894007304805e-19,-1.0416666269302368,0.3333333432674408],
	[-6.938894007304805e-19,-0.8333333134651184,-0.1666666716337204],
	[0.3819444477558136,-0.7986111044883728,-0.125],
	[-6.938894007304805e-19,-1.0416666269302368,0.3333333432674408],
	[0.3819444477558136,-0.7986111044883728,-0.125],
	[0.3993055522441864,-0.9722222089767456,0.3333333432674408],
	[0.3819444477558136,-0.7986111044883728,-0.125],
	[-6.938894007304805e-19,-0.8333333134651184,-0.1666666716337204],
	[-8.673617379884035e-19,-0.5208333134651184,-0.6666666865348816],
	[0.3819444477558136,-0.7986111044883728,-0.125],
	[-8.673617379884035e-19,-0.5208333134651184,-0.6666666865348816],
	[0.390625,-0.390625,-0.6666666865348816],
	[-8.673617379884035e-19,-0.5208333134651184,-0.6666666865348816],
	[-6.938894007304805e-19,-0.8333333134651184,-0.1666666716337204],
	[-0.3819444477558136,-0.7986111044883728,-0.125],
	[-0.3819444477558136,-0.7986111044883728,-0.125],
	[-0.390625,-0.390625,-0.6666666865348816],
	[-8.673617379884035e-19,-0.5208333134651184,-0.6666666865348816],
	[-0.9722222089767456,-0.3993055522441864,0.3333333432674408],
	[-0.7986111044883728,-0.3819444477558136,-0.125],
	[-0.6944444179534912,-0.6944444179534912,0],
	[-0.9722222089767456,-0.3993055522441864,0.3333333432674408],
	[-0.6944444179534912,-0.6944444179534912,0],
	[-0.7638888955116272,-0.7638888955116272,0.3333333432674408],
	[-0.3993055522441864,-0.9722222089767456,0.3333333432674408],
	[-0.7638888955116272,-0.7638888955116272,0.3333333432674408],
	[-0.6944444179534912,-0.6944444179534912,0],
	[-0.3993055522441864,-0.9722222089767456,0.3333333432674408],
	[-0.6944444179534912,-0.6944444179534912,0],
	[-0.3819444477558136,-0.7986111044883728,-0.125],
	[-0.390625,-0.390625,-0.6666666865348816],
	[-0.3819444477558136,-0.7986111044883728,-0.125],
	[-0.7986111044883728,-0.3819444477558136,-0.125],
	[-0.3819444477558136,-0.7986111044883728,-0.125],
	[-0.6944444179534912,-0.6944444179534912,0],
	[-0.7986111044883728,-0.3819444477558136,-0.125],
	[-0.3993055522441864,0.9722222089767456,0.3333333432674408],
	[-0.3819444477558136,0.7986111044883728,-0.125],
	[-0.6944444179534912,0.6944444179534912,0],
	[-0.3993055522441864,0.9722222089767456,0.3333333432674408],
	[-0.6944444179534912,0.6944444179534912,0],
	[-0.7638888955116272,0.7638888955116272,0.3333333432674408],
	[-0.9722222089767456,0.3993055522441864,0.3333333432674408],
	[-0.7638888955116272,0.7638888955116272,0.3333333432674408],
	[-0.6944444179534912,0.6944444179534912,0],
	[-0.9722222089767456,0.3993055522441864,0.3333333432674408],
	[-0.6944444179534912,0.6944444179534912,0],
	[-0.7986111044883728,0.3819444477558136,-0.125],
	[-0.7986111044883728,0.3819444477558136,-0.125],
	[-0.6944444179534912,0.6944444179534912,0],
	[-0.3819444477558136,0.7986111044883728,-0.125],
	[-0.7986111044883728,0.3819444477558136,-0.125],
	[-0.3819444477558136,0.7986111044883728,-0.125],
	[-0.390625,0.390625,-0.6666666865348816],
	[-6.938894007304805e-19,1.0416666269302368,0.3333333432674408],
	[0.3993055522441864,0.9722222089767456,0.3333333432674408],
	[0.3819444477558136,0.7986111044883728,-0.125],
	[-6.938894007304805e-19,1.0416666269302368,0.3333333432674408],
	[0.3819444477558136,0.7986111044883728,-0.125],
	[-6.938894007304805e-19,0.8333333134651184,-0.1666666716337204],
	[-6.938894007304805e-19,1.0416666269302368,0.3333333432674408],
	[-6.938894007304805e-19,0.8333333134651184,-0.1666666716337204],
	[-0.3819444477558136,0.7986111044883728,-0.125],
	[-0.3819444477558136,0.7986111044883728,-0.125],
	[-0.3993055522441864,0.9722222089767456,0.3333333432674408],
	[-6.938894007304805e-19,1.0416666269302368,0.3333333432674408],
	[-0.3819444477558136,0.7986111044883728,-0.125],
	[-6.938894007304805e-19,0.8333333134651184,-0.1666666716337204],
	[-8.673617379884035e-19,0.5208333134651184,-0.6666666865348816],
	[-8.673617379884035e-19,0.5208333134651184,-0.6666666865348816],
	[-0.390625,0.390625,-0.6666666865348816],
	[-0.3819444477558136,0.7986111044883728,-0.125],
	[0.3819444477558136,0.7986111044883728,-0.125],
	[0.390625,0.390625,-0.6666666865348816],
	[-8.673617379884035e-19,0.5208333134651184,-0.6666666865348816],
	[0.3819444477558136,0.7986111044883728,-0.125],
	[-8.673617379884035e-19,0.5208333134651184,-0.6666666865348816],
	[-6.938894007304805e-19,0.8333333134651184,-0.1666666716337204],
	[0.4166666567325592,0,1.503333330154419],
	[0.4166666567325592,-0.4166666567325592,1.503333330154419],
	[0.3125,-0.3125,1.3333333730697632],
	[0.3125,-0.3125,1.3333333730697632],
	[0.4166666567325592,0,1.3333333730697632],
	[0.4166666567325592,0,1.503333330154419],
	[-6.938894007304805e-19,0.4166666567325592,1.503333330154419],
	[0.4166666567325592,0.4166666567325592,1.503333330154419],
	[0.3125,0.3125,1.3333333730697632],
	[0.3125,0.3125,1.3333333730697632],
	[-6.938894007304805e-19,0.4166666567325592,1.3333333730697632],
	[-6.938894007304805e-19,0.4166666567325592,1.503333330154419],
	[-0.3125,0.3125,1.3333333730697632],
	[-0.4166666567325592,0,1.3333333730697632],
	[-0.4166666567325592,0,1.503333330154419],
	[-0.4166666567325592,0,1.503333330154419],
	[-0.4166666567325592,0.4166666567325592,1.503333330154419],
	[-0.3125,0.3125,1.3333333730697632],
	[-0.3125,-0.3125,1.3333333730697632],
	[-6.938894007304805e-19,-0.4166666567325592,1.3333333730697632],
	[-6.938894007304805e-19,-0.4166666567325592,1.503333330154419],
	[-6.938894007304805e-19,-0.4166666567325592,1.503333330154419],
	[-0.4166666567325592,-0.4166666567325592,1.503333330154419],
	[-0.3125,-0.3125,1.3333333730697632],
	[0.5208333134651184,0,-0.6666666865348816],
	[0.390625,-0.390625,-0.6666666865348816],
	[-8.673617379884035e-19,-0.5208333134651184,-0.6666666865348816],
	[0.5208333134651184,0,-0.6666666865348816],
	[-8.673617379884035e-19,-0.5208333134651184,-0.6666666865348816],
	[-8.673617379884035e-19,0.5208333134651184,-0.6666666865348816],
	[0.5208333134651184,0,-0.6666666865348816],
	[-8.673617379884035e-19,0.5208333134651184,-0.6666666865348816],
	[0.390625,0.390625,-0.6666666865348816],
	[-8.673617379884035e-19,-0.5208333134651184,-0.6666666865348816],
	[-0.390625,-0.390625,-0.6666666865348816],
	[-0.5208333134651184,0,-0.6666666865348816],
	[-0.5208333134651184,0,-0.6666666865348816],
	[-0.390625,0.390625,-0.6666666865348816],
	[-8.673617379884035e-19,0.5208333134651184,-0.6666666865348816],
	[-0.5208333134651184,0,-0.6666666865348816],
	[-8.673617379884035e-19,0.5208333134651184,-0.6666666865348816],
	[-8.673617379884035e-19,-0.5208333134651184,-0.6666666865348816]],
	polygons: [
	[0,1,2],
	[3,4,5],
	[6,7,8],
	[9,10,11],
	[12,13,14],
	[15,16,17],
	[18,19,20],
	[21,22,23],
	[24,25,26],
	[27,28,29],
	[30,31,32],
	[33,34,35],
	[36,37,38],
	[39,40,41],
	[42,43,44],
	[45,46,47],
	[48,49,50],
	[51,52,53],
	[54,55,56],
	[57,58,59],
	[60,61,62],
	[63,64,65],
	[66,67,68],
	[69,70,71],
	[72,73,74],
	[75,76,77],
	[78,79,80],
	[81,82,83],
	[84,85,86],
	[87,88,89],
	[90,91,92],
	[93,94,95],
	[96,97,98],
	[99,100,101],
	[102,103,104],
	[105,106,107],
	[108,109,110],
	[111,112,113],
	[114,115,116],
	[117,118,119],
	[120,121,122],
	[123,124,125],
	[126,127,128],
	[129,130,131],
	[132,133,134],
	[135,136,137],
	[138,139,140],
	[141,142,143],
	[144,145,146],
	[147,148,149],
	[150,151,152],
	[153,154,155],
	[156,157,158],
	[159,160,161],
	[162,163,164],
	[165,166,167],
	[168,169,170],
	[171,172,173],
	[174,175,176],
	[177,178,179],
	[180,181,182],
	[183,184,185],
	[186,187,188],
	[189,190,191],
	[192,193,194],
	[195,196,197],
	[198,199,200],
	[201,202,203],
	[204,205,206],
	[207,208,209],
	[210,211,212],
	[213,214,215],
	[216,217,218],
	[219,220,221],
	[222,223,224],
	[225,226,227],
	[228,229,230],
	[231,232,233],
	[234,235,236],
	[237,238,239],
	[240,241,242],
	[243,244,245],
	[246,247,248],
	[249,250,251],
	[252,253,254],
	[255,256,257],
	[258,259,260],
	[261,262,263],
	[264,265,266],
	[267,268,269],
	[270,271,272],
	[273,274,275],
	[276,277,278],
	[279,280,281],
	[282,283,284],
	[285,286,287],
	[288,289,290],
	[291,292,293],
	[294,295,296],
	[297,298,299],
	[300,301,302],
	[303,304,305],
	[306,307,308],
	[309,310,311],
	[312,313,314],
	[315,316,317],
	[318,319,320],
	[321,322,323],
	[324,325,326],
	[327,328,329],
	[330,331,332],
	[333,334,335],
	[336,337,338],
	[339,340,341],
	[342,343,344],
	[345,346,347],
	[348,349,350],
	[351,352,353],
	[354,355,356],
	[357,358,359],
	[360,361,362],
	[363,364,365],
	[366,367,368],
	[369,370,371],
	[372,373,374],
	[375,376,377],
	[378,379,380],
	[381,382,383],
	[384,385,386],
	[387,388,389],
	[390,391,392],
	[393,394,395],
	[396,397,398],
	[399,400,401],
	[402,403,404],
	[405,406,407],
	[408,409,410],
	[411,412,413],
	[414,415,416],
	[417,418,419]] })
; }
volume.source = function () {
	return main().scale(15);//.mirroredX();
	}
volume.p1 = function () {
	DX = 6 * gDPDF; DY = 158.5 * gDPDF;
	_ti.push(134,-138,130);
	aplat.poseTriangle(134,[-1+DX,15+DY],0);
	aplat.fixeTriangles([134,135,139,138]);
	aplat.fixeTriangle(135,136);
	aplat.fixeTriangle(139,137);
	
	aplat.poseTriangle(29,[15+DX,19+DY],180);
	aplat.fixeTriangles([29,28,65,64,62,63,59,58,113,112,121,120]);
	aplat.fixeTriangles([29,86,87,118,119]);

	aplat.fixeTriangles([28,33,32,67,66,69,68]);
	aplat.fixeTriangles([68,8,9,131,130]);
	
	aplat.fixeTriangles([87,89,88,124,125,122,123]);
	
	//aplat.fixeTriangles([]);
	aplat.lotEncoches([[88,75],[89,94],[86,85],[29,30],[33,31],[32,20],[67,129],[130,11],[124,136],[123,138],[122,120],[119,120],[118,65],[121,63],[69,62],[89,84]
	]);
		
	} // fin p1
volume.p2 = function () {
	DX = 6 * gDPDF; DY = 158.5 * gDPDF;
	//_ti.push(0);
	aplat.poseTriangle(0,[0+DX,0+DY],0);
	aplat.fixeTriangles([0,]);

	aplat.lotEncoches([
	]);
	} // fin p2
volume.p3 = function () {
	DX = 6 * gDPDF; DY = 158.5 * gDPDF;
	_ti.push(0);
	aplat.poseTriangle(0,[0+DX,0+DY],0);
	aplat.fixeTriangles([0]);
	aplat.lotEncoches([
	]);
	} // fin p3
volume.p4 = function () {
	DX = 6 * gDPDF; DY = 158.5 * gDPDF;
	_ti.push(0);
	aplat.poseTriangle(0,[0+DX,0+DY],0);
	aplat.fixeTriangles([0]);
	aplat.lotEncoches([
	]);
	} // fin p4
}

// GLOBAL VARIABLES
const  _gSVGScale = 16, gPrec=0.01, g_RX=false, _gTextScale=0.1, _gLigneE=0.05, _ghEncoche=1.5;
var data = [], V, _r = {cag:[], svg:[]}, _num = [], _pieces, gDPDF, 
	_ti = [], _t0 = [];

// Utility fn
function mkPath(cag){	
	var pts = [];
	
	ch = "<path d='";
	chP = "";

	courant = null;
	for(i in cag.sides){
		pt = cag.sides[i].vertex0.pos;
		if((!courant) || (!pt.equals(courant)) ) {
			y = 200 - pt.y;
			chP = chP + " M " + (pt.x*_gSVGScale).toFixed(2) +" "+ (y*_gSVGScale).toFixed(2);
		}
		courant = cag.sides[i].vertex1.pos;
		y = 200 - courant.y;
		chP = chP + " L " + (courant.x*_gSVGScale).toFixed(2) +" "+ (y*_gSVGScale).toFixed(2);
	}

	return ch+chP+" Z' />";
}

function getParameterDefinitions() {
  return [
	 { name:'PAGE', type:'slider', initial:1,  min:1, max:5, step:1, caption:"Page:" }
	,{ name:'DPDF', type:'choice', initial:1, caption:'Ajuster PDF ?',
	  values: [0,1], captions:['Non', 'Oui']  }
	,{ name:'MODE', type:'choice', initial:'PROD', caption:'Mode ?',
	values: ['PROD', 'DEV'], captions:['Production', 'Developpement'] }
  ];
}

function main(params) {
_pieces = ['p'+params.PAGE];
gDPDF = Number(params.DPDF);
// inclusions
aplat();
volume();

V = volume.source();
aplat.rendu(_r, _pieces);
if(params.MODE == 'PROD'){return cube();}
else return _r.cag;
}
